const express = require('express');
const fetch = require('node-fetch');
const { MongoClient } = require('mongodb');

// –í–µ—Ä—Å–∏—è –±–æ—Ç–∞
const BOT_VERSION = 'v3.0.0-complete-rewrite';

const app = express();
const PORT = process.env.PORT || 8080;
const BOT_TOKEN = process.env.BOT_TOKEN || '8480976603:AAGwXGSfMAMQkndmNX7JFe2aZDI6zSTXc_4';
const GAME_URL = 'https://botenergy-7to1-production.up.railway.app';
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://xqrmedia_db_user:zs1T2CBkIM8CPZvt@energy-cluster.e8cwdia.mongodb.net/?retryWrites=true&w=majority&appName=energy-cluster';
const REF_BONUS = parseInt(process.env.REF_BONUS || '10', 10);
const ADMIN_IDS = [6840451873]; // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;

app.use(express.json());

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let db = null;
let client = null;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
async function connectToMongoDB() {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB...');
    client = new MongoClient(MONGODB_URI, {
      maxPoolSize: 5,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000
    });
    
    await client.connect();
    db = client.db('energy888');
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã
    await initializeDatabase();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collections = ['users', 'transactions'];
    for (const collectionName of collections) {
      try {
        await db.createCollection(collectionName);
        console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} —Å–æ–∑–¥–∞–Ω–∞`);
      } catch (e) {
        console.log(`‚ÑπÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    try {
      await db.collection('users').createIndex({ telegramId: 1 }, { unique: true });
      await db.collection('users').createIndex({ username: 1 });
      await db.collection('users').createIndex({ referredBy: 1 });
      await db.collection('transactions').createIndex({ userId: 1 });
      await db.collection('transactions').createIndex({ inviterId: 1 });
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
    } catch (e) {
      console.log('‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId, text, replyMarkup = null) {
  try {
    const messageData = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    };
    
    if (replyMarkup) {
      messageData.reply_markup = replyMarkup;
    }
    
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(messageData)
    });
    
    const result = await response.json();
    if (!result.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', result);
    }
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
async function sendPhoto(chatId, photoUrl, caption = '') {
  try {
    const response = await fetch(`${TELEGRAM_API}/sendPhoto`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        photo: photoUrl,
        caption: caption,
        parse_mode: 'HTML'
      })
    });
    
    const result = await response.json();
    if (!result.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', result);
    }
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', error);
    return null;
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
async function saveUserToDB(userId, userData) {
  if (!db) {
    console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    return false;
  }
  
  try {
    const result = await db.collection('users').updateOne(
      { telegramId: userId },
      { 
        $set: {
          telegramId: userId,
          username: userData.username,
          firstName: userData.firstName,
          updatedAt: new Date()
        },
        $setOnInsert: {
          balance: 0,
          referralsCount: 0,
          createdAt: new Date()
        }
      },
      { upsert: true }
    );
    
    console.log('üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:', userId, result.upsertedId ? '—Å–æ–∑–¥–∞–Ω' : '–æ–±–Ω–æ–≤–ª–µ–Ω');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
async function getUserFromDB(userId) {
  if (!db) return null;
  
  try {
    return await db.collection('users').findOne({ telegramId: userId });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
}

// –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
async function processReferralBonus(inviterId, inviteeId, inviteeData) {
  if (!db) return false;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const inviter = await db.collection('users').findOne({ telegramId: inviterId });
    if (!inviter) {
      console.log('‚ùå –ü—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω:', inviterId);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –Ω–æ–≤—ã–π
    const existingUser = await db.collection('users').findOne({ telegramId: inviteeId });
    if (existingUser) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', inviteeId);
      return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑—å—é
    await db.collection('users').insertOne({
      telegramId: inviteeId,
      username: inviteeData.username,
      firstName: inviteeData.firstName,
      referredBy: inviterId,
      balance: 0,
      referralsCount: 0,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–º—É
    await db.collection('users').updateOne(
      { telegramId: inviterId },
      { 
        $inc: { balance: REF_BONUS, referralsCount: 1 }, 
        $set: { updatedAt: new Date() } 
      }
    );
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await db.collection('transactions').insertOne({
      type: 'referral_bonus',
      amount: REF_BONUS,
      inviterId: inviterId,
      inviteeId: inviteeId,
      createdAt: new Date()
    });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
    await sendMessage(inviterId, `üéâ +$${REF_BONUS} –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ @${inviteeData.username || inviteeData.firstName}!`);
    
    console.log('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω:', inviterId, '->', inviteeId);
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:', error);
    return false;
  }
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
function getWelcomeMessage() {
  return `üëã –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ (–∏–ª–∏ –ø–æ–¥—Ä—É–≥–∞)! üëë

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–≠–Ω–µ—Ä–≥–∏—é –î–µ–Ω–µ–≥</b> ‚ú®
‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ –∏–≥—Ä–∞ —Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –≤ –∫–≤–∞–Ω—Ç–æ–≤–æ–º –ø–æ–ª–µ.

–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å:
ü´Ç –ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π
üí∞ –£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥
ü§ù –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤
üé≤ –ò–≥—Ä–∞—Ç—å –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è

üéØ –í—ã–±–∏—Ä–∞–π, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá`;
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
  return {
    keyboard: [
      [
        { text: 'üìñ –û –ø—Ä–æ–µ–∫—Ç–µ' },
        { text: 'üåê –°–æ–æ–±—â–µ—Å—Ç–≤–æ' }
      ],
      [
        { text: 'üë• –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤' }
      ],
      [
        { text: 'üí∞ –î–æ—Ö–æ–¥' },
        { text: 'üéÆ –ò–≥—Ä–∞—Ç—å' }
      ]
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
    selective: false
  };
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Ö–æ–¥–µ
async function getEarnMessage(userId) {
  const user = await getUserFromDB(userId);
  const balance = user ? user.balance : 0;
  const referralsCount = user ? user.referralsCount : 0;
  const refLink = `https://t.me/energy_m_bot?start=ref_${userId}`;

  return `üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

üíµ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> $${balance}
üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> ${referralsCount} —á–µ–ª–æ–≤–µ–∫

üéÆ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã: $20</b>
üë• <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –∏–≥—Ä–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>

üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>
<code>${refLink}</code>

üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É
‚Ä¢ –û–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∏ –∂–º—ë—Ç Start
‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ $${REF_BONUS} –Ω–∞ –±–∞–ª–∞–Ω—Å
‚Ä¢ –ë–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤ –∏–≥—Ä–µ –∏ —Ç—É—Ä–Ω–∏—Ä–∞—Ö

üéØ <b>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    console.log('üì± –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', update);

    if (update.message) {
      const message = update.message;
      const chatId = message.chat.id;
      const userId = message.from.id;
      const text = message.text;
      const username = message.from.username;
      const firstName = message.from.first_name;

      console.log('üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:', { userId, username, firstName, text });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      await saveUserToDB(userId, { username, firstName });

      if (text === '/start') {
        // –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
        await sendPhoto(chatId, 'https://drive.google.com/uc?export=view&id=1DVFh1fEm5CG0crg_OYWKBrLIjnmgwjm8', getWelcomeMessage());
        await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenu());
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(async () => {
          const user = await getUserFromDB(userId);
          if (user && user.balance === 0) {
            await db.collection('users').updateOne(
              { telegramId: userId },
              { $inc: { balance: REF_BONUS }, $set: { updatedAt: new Date() } }
            );
            
            await db.collection('transactions').insertOne({
              type: 'welcome_bonus',
              amount: REF_BONUS,
              userId: userId,
              createdAt: new Date()
            });
            
            const bonusMessage = `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Energy of Money!</b>

üí∞ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ $${REF_BONUS} –Ω–∞ –±–∞–ª–∞–Ω—Å!</b>

üéÆ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã: $20</b>
üë• <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –∏–≥—Ä–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>

üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>https://t.me/energy_m_bot?start=ref_${userId}</code>

üí° <b>–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ $${REF_BONUS} –Ω–∞ –±–∞–ª–∞–Ω—Å!</b>

üöÄ –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;
            
            await sendMessage(chatId, bonusMessage, getMainMenu());
          }
        }, 30000);
        
      } else if (text.startsWith('/start ref_')) {
        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
        const refId = text.replace('/start ref_', '');
        const inviterId = parseInt(refId, 10);
        
        if (inviterId && inviterId !== userId) {
          const success = await processReferralBonus(inviterId, userId, { username, firstName });
          if (success) {
            await sendMessage(chatId, `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.`, getMainMenu());
          } else {
            await sendPhoto(chatId, 'https://drive.google.com/uc?export=view&id=1DVFh1fEm5CG0crg_OYWKBrLIjnmgwjm8', getWelcomeMessage());
            await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenu());
          }
        } else {
          await sendPhoto(chatId, 'https://drive.google.com/uc?export=view&id=1DVFh1fEm5CG0crg_OYWKBrLIjnmgwjm8', getWelcomeMessage());
          await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenu());
        }
        
      } else if (text === 'üí∞ –î–æ—Ö–æ–¥') {
        await sendPhoto(chatId, 'https://drive.google.com/uc?export=view&id=1P_RJ8gYipADlTL8zHVXmyEdgzTbwJn_8', await getEarnMessage(userId));
        
      } else if (text === '/admin_stats' && ADMIN_IDS.includes(userId)) {
        // –ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const users = await db.collection('users').find({}).toArray();
        const totalBalance = users.reduce((sum, user) => sum + (user.balance || 0), 0);
        const totalReferrals = users.reduce((sum, user) => sum + (user.referralsCount || 0), 0);
        
        const statsMessage = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: $${totalBalance}
üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${totalReferrals}
üéØ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: $${users.length > 0 ? (totalBalance / users.length).toFixed(2) : 0}`;
        
        await sendMessage(chatId, statsMessage);
        
      } else if (text === '/admin_give_bonus' && ADMIN_IDS.includes(userId)) {
        // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –≤—Å–µ–º
        await sendMessage(chatId, 'üîÑ –ù–∞—á–∏–Ω–∞—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...');
        
        const users = await db.collection('users').find({}).toArray();
        let successCount = 0;
        let errorCount = 0;
        
        for (const user of users) {
          try {
            await db.collection('users').updateOne(
              { telegramId: user.telegramId },
              { $inc: { balance: REF_BONUS }, $set: { updatedAt: new Date() } }
            );
            
            await db.collection('transactions').insertOne({
              type: 'welcome_bonus_retroactive',
              amount: REF_BONUS,
              userId: user.telegramId,
              createdAt: new Date()
            });
            
            const message = `üéâ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>

üí∞ <b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å $${REF_BONUS}!</b>

üéÆ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã: $20</b>
üë• <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –∏–≥—Ä–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>

üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
<code>https://t.me/energy_m_bot?start=ref_${user.telegramId}</code>

üí° <b>–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ $${REF_BONUS} –Ω–∞ –±–∞–ª–∞–Ω—Å!</b>

üöÄ –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;
            
            await sendMessage(user.telegramId, message);
            successCount++;
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
            
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegramId}:`, error);
            errorCount++;
          }
        }
        
        await sendMessage(chatId, `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –ù–∞—á–∏—Å–ª–µ–Ω–æ ${successCount}, –û—à–∏–±–æ–∫ ${errorCount}, –í—Å–µ–≥–æ ${users.length}`);
        
      } else {
        await sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', getMainMenu());
      }
    }

    res.json({ status: 'OK' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    ok: true,
    status: 'healthy',
    uptime: process.uptime(),
    users: 0,
    timestamp: new Date().toISOString(),
    version: BOT_VERSION
  });
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({ 
    ok: true, 
    message: `Energy Money Bot v${BOT_VERSION} is running`,
    endpoints: {
      health: '/health',
      webhook: '/webhook'
    }
  });
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  if (client) {
    await client.close();
  }
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  if (client) {
    await client.close();
  }
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    await connectToMongoDB();
    
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ Energy Money Bot v${BOT_VERSION} –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`ü§ñ Bot Token: ${BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      console.log(`üéÆ Game URL: ${GAME_URL}`);
      console.log(`üí∞ Referral Bonus: $${REF_BONUS}`);
      console.log(`üëë Admin IDs: ${ADMIN_IDS.join(', ')}`);
      console.log(`üåç Server listening on 0.0.0.0:${PORT}`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

startServer();

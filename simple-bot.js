const express = require('express');
const app = express();
const PORT = process.env.PORT || 3001;

// Telegram Bot
const BOT_TOKEN = process.env.BOT_TOKEN || '8480976603:AAGwXGSfMAMQkndmNX7JFe2aZDI6zSTXc_4';
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const GAME_URL = 'https://energy888.onrender.com';

// Middleware
app.use(express.json());

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const users = new Map(); // userId -> { id, name, photo, authorized }

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId, text, replyMarkup = null) {
  try {
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML',
        reply_markup: replyMarkup
      })
    });
    return await response.json();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å"
function createPlayButton(userId) {
  return {
    inline_keyboard: [[
      {
        text: 'üéÆ –ò–≥—Ä–∞—Ç—å',
        callback_data: `play_${userId}`
      }
    ]]
  };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    
    if (update.message) {
      const message = update.message;
      const chatId = message.chat.id;
      const userId = message.from.id;
      const username = message.from.username || message.from.first_name;
      const firstName = message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const lastName = message.from.last_name || '';
      const photo = message.from.photo_url || '';
      
      console.log('üì± –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:', { userId, username, firstName });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      users.set(userId, {
        id: userId,
        name: `${firstName} ${lastName}`.trim(),
        username: username,
        photo: photo,
        authorized: false
      });
      
      const text = message.text;
      
      if (text === '/start') {
        await sendMessage(chatId, 
          `üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Energy of Money!</b>\n\n` +
          `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n` +
          `–≠—Ç–æ –∏–≥—Ä–∞ –ø—Ä–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π.\n` +
          `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!`,
          createPlayButton(userId)
        );
      } 
      else if (text === '/help') {
        await sendMessage(chatId, 
          `üìã <b>–ü–æ–º–æ—â—å</b>\n\n` +
          `/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n` +
          `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n` +
          `/play - –ò–≥—Ä–∞—Ç—å\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞!`
        );
      }
      else if (text === '/play') {
        await sendMessage(chatId, 
          `üéÆ <b>–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!</b>\n\n` +
          `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å" —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ª–æ–±–±–∏!`,
          createPlayButton(userId)
        );
      }
      else {
        await sendMessage(chatId, 
          `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`
        );
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    if (update.callback_query) {
      const callback = update.callback_query;
      const chatId = callback.message.chat.id;
      const userId = callback.from.id;
      const data = callback.data;
      
      console.log('üîò Callback –ø–æ–ª—É—á–µ–Ω:', { userId, data });
      
      if (data.startsWith('play_')) {
        const targetUserId = data.split('_')[1];
        
        if (targetUserId == userId) {
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const userData = users.get(userId);
          
          if (userData) {
            // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userData.authorized = true;
            users.set(userId, userData);
            
            // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const authToken = `tg_${userId}_${Date.now()}`;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ–±–±–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            const gameLink = `${GAME_URL}/simple-rooms?auth=telegram&token=${authToken}&user=${encodeURIComponent(JSON.stringify({
              id: userData.id,
              name: userData.name,
              username: userData.username,
              photo: userData.photo
            }))}`;
            
            await sendMessage(chatId, 
              `‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n` +
              `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.name}\n` +
              `üÜî ID: ${userData.id}\n\n` +
              `üéÆ <a href="${gameLink}">–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ª–æ–±–±–∏</a>\n\n` +
              `–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É:\n<code>${gameLink}</code>`
            );
            
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await fetch(`${TELEGRAM_API}/answerCallbackQuery`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                callback_query_id: callback.id,
                text: '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'
              })
            });
          } else {
            await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          }
        } else {
          await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        }
      }
    }
    
    res.json({ status: 'OK' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/auth/:token', (req, res) => {
  const token = req.params.token;
  
  if (token.startsWith('tg_')) {
    const userId = token.split('_')[1];
    const userData = users.get(parseInt(userId));
    
    if (userData && userData.authorized) {
      res.json({
        ok: true,
        authorized: true,
        user: {
          id: userData.id,
          name: userData.name,
          username: userData.username,
          photo: userData.photo
        }
      });
    } else {
      res.json({ ok: false, authorized: false });
    }
  } else {
    res.json({ ok: false, authorized: false });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({
    ok: true,
    status: 'healthy',
    uptime: process.uptime(),
    users: users.size,
    timestamp: new Date().toISOString()
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    name: 'Energy of Money Bot',
    status: 'running',
    users: users.size,
    endpoints: {
      webhook: '/webhook',
      health: '/health',
      auth: '/auth/:token'
    }
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log('üöÄ Simple Bot Server running on port', PORT);
  console.log('üìä Health check: http://localhost:' + PORT + '/health');
  console.log('üîó Webhook: http://localhost:' + PORT + '/webhook');
  console.log('üéÆ Game URL:', GAME_URL);
  console.log('ü§ñ Bot Token:', BOT_TOKEN ? '‚úÖ Set' : '‚ùå Not set');
});

module.exports = app;

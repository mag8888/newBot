const fetch = require('node-fetch');

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Telegram Bot API
class BotUtils {
  constructor() {
    this.botToken = process.env.BOT_TOKEN || '8480976603:AAGwXGSfMAMQkndmNX7JFe2aZDI6zSTXc_4';
    this.apiUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
  async getWebhookInfo() {
    try {
      const response = await fetch(`${this.apiUrl}/getWebhookInfo`);
      return await response.json();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info:', error);
      return null;
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook
  async setWebhook(url) {
    try {
      const response = await fetch(`${this.apiUrl}/setWebhook`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url })
      });
      return await response.json();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
      return null;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å webhook
  async deleteWebhook() {
    try {
      const response = await fetch(`${this.apiUrl}/deleteWebhook`);
      return await response.json();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
  async getMe() {
    try {
      const response = await fetch(`${this.apiUrl}/getMe`);
      return await response.json();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
      return null;
    }
  }
}

// –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const bot = new BotUtils();
  
  async function main() {
    console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞...');
    
    const me = await bot.getMe();
    if (me && me.ok) {
      console.log('‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω:', me.result.first_name, `(@${me.result.username})`);
    } else {
      console.log('‚ùå –ë–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
      return;
    }

    const webhookInfo = await bot.getWebhookInfo();
    if (webhookInfo && webhookInfo.ok) {
      console.log('üì° Webhook:', webhookInfo.result.url || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      console.log('‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', webhookInfo.result.pending_update_count);
    }
  }

  main().catch(console.error);
}

module.exports = BotUtils;

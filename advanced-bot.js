const express = require('express');
const fetch = require('node-fetch');

const app = express();
const PORT = process.env.PORT || 3001;
const BOT_TOKEN = process.env.BOT_TOKEN || '8480976603:AAGwXGSfMAMQkndmNX7JFe2aZDI6zSTXc_4';
const GAME_URL = 'https://botenergy-7to1-production.up.railway.app';

const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;

app.use(express.json());

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const users = new Map();

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId, text, replyMarkup = null) {
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', { chatId, text: text.substring(0, 100) + '...' });
    
    const messageData = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    };
    
    if (replyMarkup) {
      messageData.reply_markup = replyMarkup;
    }
    
    const response = await fetch(`${TELEGRAM_API}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(messageData)
    });
    const result = await response.json();
    console.log('üì§ –û—Ç–≤–µ—Ç –æ—Ç Telegram API:', result);
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
async function sendPhoto(chatId, photo, caption = '', replyMarkup = null) {
  try {
    const messageData = {
      chat_id: chatId,
      photo: photo,
      caption: caption,
      parse_mode: 'HTML'
    };
    
    if (replyMarkup) {
      messageData.reply_markup = replyMarkup;
    }
    
    const response = await fetch(`${TELEGRAM_API}/sendPhoto`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(messageData)
    });
    return await response.json();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
async function sendVideo(chatId, video, caption = '', replyMarkup = null) {
  try {
    const messageData = {
      chat_id: chatId,
      video: video,
      caption: caption,
      parse_mode: 'HTML'
    };
    
    if (replyMarkup) {
      messageData.reply_markup = replyMarkup;
    }
    
    const response = await fetch(`${TELEGRAM_API}/sendVideo`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(messageData)
    });
    return await response.json();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ:', error);
    return null;
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
  return {
    inline_keyboard: [
      [
        { text: 'üìñ –û –ø—Ä–æ–µ–∫—Ç–µ', callback_data: 'about' },
        { text: 'üë• –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤', callback_data: 'clients' }
      ],
      [
        { text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', callback_data: 'earn' },
        { text: 'üéÆ –ò–≥—Ä–∞—Ç—å', callback_data: 'play' }
      ]
    ]
  };
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
function getWelcomeMessage() {
  return `üëã –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ (–∏–ª–∏ –ø–æ–¥—Ä—É–≥–∞)! üëë

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–≠–Ω–µ—Ä–≥–∏—é –î–µ–Ω–µ–≥</b> ‚ú®
‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ –∏–≥—Ä–∞ —Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –≤ –∫–≤–∞–Ω—Ç–æ–≤–æ–º –ø–æ–ª–µ.

–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å:
ü´Ç –ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π
üí∞ –£–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥
ü§ù –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤
üé≤ –ò–≥—Ä–∞—Ç—å –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è

üéØ –í—ã–±–∏—Ä–∞–π, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá`;
}

// –û –ø—Ä–æ–µ–∫—Ç–µ
function getAboutMessage() {
  return `üìñ <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b>

¬´<b>–≠–Ω–µ—Ä–≥–∏—è –î–µ–Ω–µ–≥</b>¬ª ‚Äî —ç—Ç–æ –Ω–æ–≤–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ CashFlow.  
–û–Ω–∞ –ø–æ–º–æ–≥–∞–µ—Ç –º–µ–Ω—è—Ç—å –º—ã—à–ª–µ–Ω–∏–µ, –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.

üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:</b>
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–≥—Ä—É
‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
‚Ä¢ –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–≤—è–∑–µ–π

üöÄ <b>–ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ!</b>`;
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤
function getClientsMessage() {
  return `üë• <b>–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤</b>

–ß–µ—Ä–µ–∑ –∏–≥—Ä—É —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.  
–≠—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π.

üíº <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –ò–≥—Ä–∞–π –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Å—è
‚Ä¢ –ó–Ω–∞–∫–æ–º—å—Å—è —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏
‚Ä¢ –ù–∞—Ö–æ–¥–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –°—Ç—Ä–æ–π –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è

üéØ <b>–ì–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º?</b>`;
}

// –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å
function getEarnMessage() {
  return `üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>

–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å ¬´<b>–≠–Ω–µ—Ä–≥–∏–µ–π –î–µ–Ω–µ–≥</b>¬ª?  
–°—Ç–∞–Ω—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∞–π –¥–æ—Ö–æ–¥, –∏–≥—Ä–∞—è –∏ –ø–æ–º–æ–≥–∞—è –¥—Ä—É–≥–∏–º –ª—é–¥—è–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.

üíé <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
‚Ä¢ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤

üöÄ <b>–ù–∞—á–Ω–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!</b>`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    console.log('üì± –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', update);

    if (update.message) {
      const message = update.message;
      const chatId = message.chat.id;
      const userId = message.from.id;
      const text = message.text;

      console.log('üì± –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:', { userId, username: message.from.username, firstName: message.from.first_name });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = {
        id: userId,
        name: message.from.first_name || message.from.username || `User${userId}`,
        username: message.from.username,
        photo: message.from.photo_url || ''
      };
      users.set(userId, userData);

      if (text === '/start') {
        await sendMessage(chatId, getWelcomeMessage(), getMainMenu());
      } else if (text === '/help') {
        await sendMessage(chatId, 
          'üÜò <b>–ü–æ–º–æ—â—å</b>\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n' +
          'üìñ –û –ø—Ä–æ–µ–∫—Ç–µ - —É–∑–Ω–∞–π –±–æ–ª—å—à–µ\n' +
          'üë• –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ - –Ω–∞–π–¥–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤\n' +
          'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å - –º–æ–Ω–µ—Ç–∏–∑–∏—Ä—É–π –Ω–∞–≤—ã–∫–∏\n' +
          'üéÆ –ò–≥—Ä–∞—Ç—å - –∑–∞–ø—É—Å—Ç–∏ –∏–≥—Ä—É\n\n' +
          '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é!',
          getMainMenu()
        );
      } else {
        await sendMessage(chatId, 
          '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏.',
          getMainMenu()
        );
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    if (update.callback_query) {
      const callback = update.callback_query;
      const chatId = callback.message.chat.id;
      const userId = callback.from.id;
      const data = callback.data;

      console.log('üîò Callback –ø–æ–ª—É—á–µ–Ω:', { userId, data, chatId });

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      try {
        await fetch(`${TELEGRAM_API}/answerCallbackQuery`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            callback_query_id: callback.id,
            text: '‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...'
          })
        });
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ callback –æ—Ç–≤–µ—Ç–∞:', error);
      }

      if (data === 'about') {
        await sendMessage(chatId, getAboutMessage(), getMainMenu());
      } else if (data === 'clients') {
        const clientsKeyboard = {
          inline_keyboard: [
            [{ text: 'üéØ –°—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º', callback_data: 'become_master' }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        };
        await sendMessage(chatId, getClientsMessage(), clientsKeyboard);
      } else if (data === 'earn') {
        const earnKeyboard = {
          inline_keyboard: [
            [{ text: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'submit_application' }],
            [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        };
        await sendMessage(chatId, getEarnMessage(), earnKeyboard);
      } else if (data === 'play') {
        const userData = users.get(userId);
        if (userData) {
          const authToken = `tg_${userId}_${Date.now()}`;
          
          const gameLink = `${GAME_URL}/simple-auth?auth=telegram&token=${authToken}&user=${encodeURIComponent(JSON.stringify({
            id: userData.id,
            name: userData.name,
            username: userData.username,
            photo: userData.photo
          }))}`;

          const playKeyboard = {
            inline_keyboard: [
              [{ text: 'üéÆ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É', url: gameLink }],
              [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          };

          await sendMessage(chatId, 
            `üéÆ <b>–ò–≥—Ä–∞—Ç—å</b>\n\n` +
            `–ì–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? üé≤\n` +
            `–ó–∞–ø—É—Å–∫–∞–π –∏–≥—Ä—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–π —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ –º–∏—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π!\n\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.name}\n` +
            `üÜî ID: ${userData.id}`,
            playKeyboard
          );
        } else {
          await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', getMainMenu());
        }
      } else if (data === 'become_master') {
        await sendMessage(chatId, 
          'üéØ <b>–°—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º</b>\n\n' +
          '‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n' +
          'üìû –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞.\n\n' +
          '‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!',
          getMainMenu()
        );
      } else if (data === 'submit_application') {
        await sendMessage(chatId, 
          'üìù <b>–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</b>\n\n' +
          '‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b> –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∑–∞—Ä–∞–±–æ—Ç–∫–∞.\n\n' +
          'üíº –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.\n\n' +
          '‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!',
          getMainMenu()
        );
      } else if (data === 'main_menu') {
        await sendMessage(chatId, getWelcomeMessage(), getMainMenu());
      }
    }

    res.json({ status: 'OK' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    ok: true, 
    status: 'healthy', 
    uptime: process.uptime(),
    users: users.size,
    timestamp: new Date().toISOString()
  });
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({ 
    ok: true, 
    name: 'energy-money-advanced-bot',
    version: '2.0.0',
    features: ['menu', 'game', 'partnership', 'clients']
  });
});

app.listen(PORT, () => {
  console.log(`üöÄ Advanced Bot Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`ü§ñ Bot Token: ${BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
  console.log(`üéÆ Game URL: ${GAME_URL}`);
});
